import{_ as o,c,o as d,ag as a}from"./chunks/framework.CwVs45hf.js";const h=JSON.parse('{"title":"CSS 크기를 나타내는 단위","description":"","frontmatter":{},"headers":[],"relativePath":"language/html/css-size-units.md","filePath":"language/html/css-size-units.md","lastUpdated":1745887396000}'),t={name:"language/html/css-size-units.md"};function p(s,e,i,l,r,n){return d(),c("div",null,[...e[0]||(e[0]=[a('<h1 id="css-크기를-나타내는-단위" tabindex="-1">CSS 크기를 나타내는 단위 <a class="header-anchor" href="#css-크기를-나타내는-단위" aria-label="Permalink to &quot;CSS 크기를 나타내는 단위&quot;">​</a></h1><p>CSS에서 글꼴이나 요소의 크기, 너비, 높이 값을 사용할 때 단위를 지정할 수 있다.</p><p>일반적으로 사용하는 단위들은 다음과 같이 있다:</p><ul><li><code>em</code>, <code>rem</code>, <code>ex</code></li><li><code>px</code>, <code>pt</code>, <code>pc</code></li><li><code>vw</code>, <code>vh</code></li><li><code>cm</code>, <code>mm</code>, <code>in</code></li><li><code>%</code></li></ul><p>이외에도 추가적인 단위들이 있다. 이처럼 단위가 많지만 일반적으로는 <code>em</code>, <code>rem</code>, <code>vw</code>, <code>vh</code>, <code>%</code>, <code>px</code>를 많이 사용한다.</p><h2 id="요소나-이미지에서의-단위" tabindex="-1">요소나 이미지에서의 단위 <a class="header-anchor" href="#요소나-이미지에서의-단위" aria-label="Permalink to &quot;요소나 이미지에서의 단위&quot;">​</a></h2><p>특정 태그 요소(Element)의 크기를 지정할 때 인라인 스타일 또는 CSS에서 단위를 포함한 크기를 지정한다. 일반적으로 <code>px</code>나 <code>%</code>를 자주 사용한다.</p><p><code>%</code>는 여러 요소를 조합할 때 서로의 너비나 높이를 보장하지 못하는 경우나 부모나 주변 요소에 대해 상대적인 크기를 지정하려 할 때 사용할 수 있다. 소수점을 포함할 수 있으며 <code>0.1%</code>는 <code>.1%</code>와 같이 축약할 수도 있다.</p><p><code>vw</code> (너비)와 <code>vh</code> (높이)는 표시될 수 있는 화면의 너비와 높이를 기준으로 한다. 예를 들어 너비와 높이가 각각 <code>500px x 1000px</code>인 화면에서 <code>1vw</code>는 <code>5px</code>, <code>100vw</code>는 <code>500px</code>, <code>10vh</code>는 <code>100px</code>의 크기를 가진다. 퍼센트와 유사하지만 최대 크기를 화면을 기준으로 한다는 것에 유의한다.</p><h2 id="글꼴-크기에서의-단위" tabindex="-1">글꼴 크기에서의 단위 <a class="header-anchor" href="#글꼴-크기에서의-단위" aria-label="Permalink to &quot;글꼴 크기에서의 단위&quot;">​</a></h2><p>글꼴 크기에서는 일반적으로 <code>%</code>를 사용하지 않으며 다양한 기기 크기를 지원하는 모던 브라우저 개발 환경에서는 <code>px</code>나 <code>pt</code>, <code>cm</code>과 같은 절대적인 크기 또한 사용하지 않는 추세이다. <code>px</code>와 같은 크기를 지정하면 의도한 크기대로 화면을 표시할 수 있지만 확대/축소가 적용되었거나 고해상도의 기기들에서는 글자가 지나치게 작거나 크게 표시될 수 있다. 따라서 <code>em</code>이나 <code>rem</code>같이 상대적인 크기를 활용하는 것이 좋다.</p><p>브라우저에서는 일반적으로 글꼴 크기를 지정하지 않았을 경우 기본값으로 <code>16px</code>로 설정하며, 이는 각각 <code>1em</code>, <code>12pt</code>의 크기를 나타낸다.</p><p><code>1em</code>은 <code>16px</code>의 크기이며, <code>1rem</code>도 마찬가지이다. 하지만 <code>em</code>과 <code>rem</code>은 상대적인 크기이며 크기를 결정하는 대상이 서로 다르다.</p><p><code>em</code>은 사용한 현재 요소에 대해 지정된 크기가 있다면 해당 크기에 대한 상대적인 크기를 나타낸다. 글꼴 크기의 경우 같은 위치의 요소에 대한 크기가 없기 때문에 일반적으로 상위 요소에 대한 크기를 기준으로 한다. 예를 들어 상위 <code>p</code> 태그의 <code>font-size</code>가 <code>20px</code>인 경우 하위 항목에서 <code>font-size</code>를 <code>1em</code>으로 지정하면 이 항목의 글꼴 크기는 <code>16px</code>가 아닌 <code>20px</code>가 된다.</p><p>반면 <code>rem</code>은 최상위 요소에서 지정된 값을 기준으로 한다. <code>html</code>태그에 지정된 <code>font-size</code>를 기준으로 하며 만약 이 정보가 없을 경우에는 브라우저 기본 글꼴 크기를 기준으로 설정한다.</p>',15)])])}const x=o(t,[["render",p]]);export{h as __pageData,x as default};
