import{_ as s,c as e,o as i,ag as t}from"./chunks/framework.CwVs45hf.js";const k=JSON.parse('{"title":"asar 파일 언팩","description":"","frontmatter":{},"headers":[],"relativePath":"language/javascript/library-and-frameworks/electron/unpack-asar-file-format.md","filePath":"language/javascript/library-and-frameworks/electron/unpack-asar-file-format.md","lastUpdated":1733966697000}'),n={name:"language/javascript/library-and-frameworks/electron/unpack-asar-file-format.md"};function r(p,a,l,o,c,d){return i(),e("div",null,[...a[0]||(a[0]=[t(`<h1 id="asar-파일-언팩" tabindex="-1">asar 파일 언팩 <a class="header-anchor" href="#asar-파일-언팩" aria-label="Permalink to &quot;asar 파일 언팩&quot;">​</a></h1><p><strong><a href="https://www.electronjs.org" target="_blank" rel="noreferrer">Electron</a></strong> 패키지를 빌드하면 빌드 설정에 따라 <code>.asar</code> 확장자로 압축되어 패키징되는 경우가 있다.</p><p>이 파일은 <code>electron-builder</code> 기준, 패키지가 만들어지는 대상 디렉토리에서 <code>win-unpacked\\resources</code>에 위치해있다. 프로덕션용 패키지 파일(<code>.exe</code> 등)을 설치하면 프로그램이 설치된 디렉토리의 <code>resources</code> 디렉토리에 존재한다.</p><p>이 파일은 실제로 암호화 보다는 패키지 압축 파일에 더 가깝다. 이 파일을 열어보면 빌드된 파일을 모두 확인해 볼 수 있다.</p><p><code>.asar</code> 파일을 풀어보려면 <code>asar</code> 모듈의 <code>extract</code> 명령어를 사용하여 간단히 풀어볼 수 있다.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> asar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> extract</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.asar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> asarResources</span></span></code></pre></div><p><code>npx</code>는 프로젝트 디렉토리가 아닌 환경에서 설치 과정 없이 특정 모듈의 명령어를 실행해주는 명령어이다. <code>extract</code>의 처음 인자값은 <code>asar</code> 파일의 경로, 두번째 인자값은 추출할 디렉토리 경로(없다면 생성)를 입력한다.</p><p>위 명령어를 실행하면 현재 경로에 <code>asarResources</code> 디렉토리가 만들어지고 해당 디렉토리 안에 압축 해제된 파일들이 만들어진다.</p><p><code>electron-builder</code>에서 <code>asar</code> 파일 압축 없이 패키징을 하기 위해서는 <code>package.json</code> 파일에서 빌드 옵션을 조정해주면 된다.</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		&quot;asar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,10)])])}const g=s(n,[["render",r]]);export{k as __pageData,g as default};
